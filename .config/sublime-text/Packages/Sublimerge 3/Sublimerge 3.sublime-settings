/*
 NOTE: PLEASE DO NOT EDIT THIS FILE TO PREVENT YOUR CUSTOM SETTINGS FROM BEING OVERRIDDEN EACH TIME SUBLIMERGE
 IS UPGRADED. TO MAKE CHANGES PLEASE COPY THE ENTRIES YOU WANT TO MODIFY TO `Settings - User` FILE AND EDIT THERE.
*/

{
    //HTTPS PROXY SETTINGS ////////////////////////////////////////////////////////////////////////////

    //For license registration it is required to have a working connection to the internet. If you are
    //behind a proxy, you may need to define the following settings. By default, if you are using
    //Package Control, its settings will used if the ones below are not set.

    //Proxy url in the following form: `domainname[:port]` or `ip[:port]`
    //Defaults to Package Control's `https_proxy` setting
    "https_proxy": "",

    //Proxy username (if required)
    //Defaults to Package Control's `proxy_username` setting
    "proxy_username": "",

    //Proxy password (if required)
    //Defaults to Package Control's `proxy_password` setting
    "proxy_password": "",


    //GENERAL /////////////////////////////////////////////////////////////////////////////////////////

    //EXPERIMENTAL! Defines whether or not the diff view should be displayed in current Sublime window.
    //Note: This setting does not affect directories diff view which always opens in new window.
    "use_current_window": false,

    //Defines whether or not the diff view should remain open upon saving the file.
    "save_and_stay": true,

    //General date format to be used in various places
    "date_format": "%a %b %d %H:%M:%S %Y",

    //Turn on/off debugging logs (console)
    "debug": false,

    //Fallback encoding to encode shell commands. If you get an error message while running VCS commands,
    //you should change it to the one compatible with your system's locale. For full list of encodings please
    //visit http://docs.python.org/2/library/codecs.html#standard-encodings
    "shell_fallback_encoding": "ascii",

    //Define the strategy for detecting files encoding, like files from VCS revisions, etc.
    // "auto" - try to autodetect
    // ["cp1252", "utf-8"] - detect by trying one-by-one
    // null - disable
    "file_encoding_detection_strategy": "auto",

    //This will limit the list of comparable files to the files with the same syntax
    "same_syntax_only": true,

    //This will order the list of comparable files by file's names similiarity
    "intelligent_files_sort": true,

    //This will display compact list of comparable files
    "compact_files_list": true,



    //This will display macros list in a separate menu. You will need to select "Run Macro..." option after
    //pressing ctrl+alt+d
    "macros_in_separate_menu": false,

    //This will display macros in Sublime's Command Pallette.
    "macros_in_command_palette": true,

    //THREE-WAY DIFF //////////////////////////////////////////////////////////////////////////////////

    // Layout of the three-way diff view:
    //  0 -> [ Theirs | Merged | Mine ]

    //  1 -> [ Theirs | Mine ]
    //       [    Merged     ]
    "three_way_layout": 0,

    //Percentage height for [ Merged ] pane. Applicable only when `three_way_layout` = 1
    "three_way_merged_height": 50,

    //By default, in three-way diff view, navigation is limited to conflicts only. When set to true, you
    //can navigate through all changes. You can change this setting via context menu too.
    "three_way_navigate_all": false,

    //THREE WAY DIFF ALGORITHM

    //RENDERING

    //Defines additional area (before and after viewport) that will be rendered while scrolling the view.
    //It is a percentage value. For example:
    //
    // 0 - render viewport only,
    // 0.25 - render viewport + 25% before and after
    // 0.5 - render viewport + 50% before and after
    // 1 - render viewport + 100% before and after
    //
    //You may set any value you want, even a negative one ;)
    //
    //Notice: Please keep in mind that the more is "prerendered", the slower the view is.
    "beyond_viewport_rendering": 0.25,

    //DIFF ALGORITHM //////////////////////////////////////////////////////////////////////////////////

    //Defines diff algorithm to be used. Currently available values:
    // null - default difflib's algorithm
    // "patience" - Patience diff algorithm
    "algorithm": "patience",

    //Defines how to deal with whitespace differences. Array consisting of the following:
    //"begin" - ignore at line begin, "middle" - ignore in the middle, "end" - ignore at line end
    "ignore_whitespace": [],

    //Set to true if you want to ignore differences in new line characters (CR/LF)
    "ignore_crlf": true,

    //Set to true if you want diff to be case insensitive
    "ignore_case": false,

    //Determines whether to perform intraline change analysis within each of the changed blocks.
    //It is only used to mark intraline changes and does not affect general difference analysis.
    //When you work with big files and get performance problems, you can switch this off.
    "intraline_analysis": true,

    //Ratio of lines' similiarity. When ratio is lower or equal this value, the line is considered
    //as replaced rather than modified and intraline changes will not be displayed in order to improve
    //readability.
    //As a rule of thumb, a value over 60 means the sequences are close matches.
    //0 - all intralines visible, 100 - all intralines hidden.
    "intraline_changes_threshold": 60,

    //How to draw intraline changes: 'outlined', 'filled', 'solid_underline', 'squiggly_underline', 'stippled_underline'
    //The best choice is 'outlined' or 'filled'. Underlines are not drawn by Sublime Text under whitespaces.
    "intraline_style": "filled",

    //This setting makes small spans of text, with the length lower or equal this value, to be marked
    //as part of intraline change if they appear between two intraline changes. This setting eliminates
    //noisy highlights within the line.
    "intraline_combine_threshold": 3,

    //EXPERIMENTAL! All strings matching these regular expressions will be marked as unimportant
    //while doing intraline differences analysis. They apply to a line so ^ and $ operators will match 
    //line begin and line end. Expressions are case-sensitive. 
    //
    // Important Notes:
    //  - Expressions are applied in order of appearing in this list.
    //  - Expression must have at least one capturing group - only capturing groups are considered to be 
    //    treated as unimportant. 
    //  - You should not use nested capturing groups. If your expression requires nested groups, mark
    //    the other ones as non-capturing using "?:" operator, i.e. (?:(cat|dog))?. Otherwise it will
    //    result in undefined behavior.
    //  - Implementation of this feature may change in the future.
    //
    //Example: ["\d+(st|nd|rd)"] - mark as unimportant only st, nd, rd following any number
    "intraline_unimportant_regexps": [],

    //Just like `intraline_style` but for unimportant differences
    "intraline_unimportant_style": "outlined",

    //VIEWS ///////////////////////////////////////////////////////////////////////////////////////////

    //Diff view consists of two Sublime's views. All options defined here will be applied to them.
    //The list of possible options can be found via Preferences -> Settings - Default
    "view": {
        //set to true if you want to display line numbers (they may not be corresponding
        //with original file lines due to expanded diff regions)
        "line_numbers": false,

        //set to true if you want lines to wrap on words (this is not recommended due to
        //readability reasons)
        "word_wrap": false,

        //set to false if you don't want to highlight corresponding lines
        "highlight_line": false,

        //set to 'all' to display white space characters always, 'selection' to display
        //only when selection is applied
        "draw_white_space": "all"
    },

    //Defines how often panels in diff window are synced (milliseconds). Minimum value is 1.
    //Although "1" is proved to be safe value, you should change it when Sublime Text reaches
    //high CPU usage or crashes when diff window is open.
    "scroll_sync_interval": 1,

    //Set to true if you want the first diff region to be automatically selected
    "auto_select_first": false,

    //Set to false if you don't want to automatically "jump" to the next change after merge
    "go_to_next_after_merge": false,

    //Starts diff view in swapped mode where new changes are displayed on the left-hand side panel.
    "start_swapped": false,

    // ########################################################################################################
    // # BEGIN OF UNIMPLEMENTED FEATURES' SETTINGS. THEY WILL BE IMPLEMENTED IN FUTURE RELEASES               #
    // ########################################################################################################

    //Set to true if you want diff window to be opened in full screen mode
    //"full_screen": false,

    //Depending on default state, shows/hides Menu in diff window (Windows-only)
    //If you don't use Menu normally, you should switch this to `false` - otherwise Menu will
    //be shown in diff window.
    //"toggle_menu": true,

    //Depending on default state, shows/hides Side Bar in diff window.
    //If you don't use Side Bar normally, you should switch this to `false` - otherwise Side Bar will
    //be shown in diff window.
    //"toggle_side_bar": true,

    //Depending on default state, shows/hides Minimap in diff window
    //If you don't use Minimap normally, you should switch this to `false` - otherwise Minimap will
    //be shown in diff window.
    //"toggle_minimap": false,

    // ########################################################################################################
    // # END OF UNIMPLEMENTED FEATURES' SETTINGS                                                              #
    // ########################################################################################################

    //User-defined whitelist for commands to be available to run in diff view. Some commands may cause
    //the diff view to work not properly and lead to undefined behavior. Use with caution!
    //
    //Example: 
    //  {
    //     "command1": "*",                                  //accepts command with any arguments
    //     "command2": {"arg1": "*"},                        //accepts command with certain arguments and any arguments' values
    //     "command3": {"arg1": ["value1", "value2"]}        //accepts command with certain arguments and certain possible values
    //  }

    "diff_view_allowed_commands": {},


    //Whether to display summary panel
    "summary_panel": true,

    //Background color for summary panel. Helpful when your summary panel is confluencing with diff panels.
    //Set to null for color from current color scheme.
    "summary_panel_background": null,

    //The renderer to be used to draw changes. Possible values:
    // - "gutter" - renders using gutter icons. Elegant and detailed but a little slower than "outline"
    // - "outline" - renders using outlines around text. Less elegant and readable but faster than "gutter"
    "diff_block_renderer": "gutter",

    //DIFF BLOCK COLORS ///////////////////////////////////////////////////////////////////////////////

    //Colors can be set using hex notation (#RRGGBB) or by scope name (i.e. "entity.name.tag"). For full
    //list of scopes, please open your default .tmTheme file.

    //color when content of difference exists in both files
    "diff_block_changed": "#FDECAC",

    //color when content of difference exists in left file, but does not exist in right one
    "diff_block_inserted": "#64BF0E",

    //color when content of difference exists in right file, but does not exist in left one
    "diff_block_deleted": "#F92672",

    //color when changes are conflicting with each other
    "diff_block_conflict": "#FF0000",

    //fill color for intraline changes marks (changed)
    "diff_block_intraline_changed": "#FDECAC",

    //fill color for intraline changes marks (inserted)
    "diff_block_intraline_inserted": "#FDECAC",

    //fill color for intraline changes marks (deleted)
    "diff_block_intraline_deleted": "#FDECAC",

    //Ooutline color for selected difference.
    //Set to 'auto' and the color will be taken from the first line in block.
    "diff_block_selected": "#75715E",

    //fill color for missing lines block
    "diff_block_missing": "#75715E",


    //SNAPSHOTS ///////////////////////////////////////////////////////////////////////////////////////

    //Whether to automatically create snapshot when file is opened
    "snapshots_on_open": true,

    //Whether to automatically create snapshot each time file is saved
    "snapshots_on_save": false,

    //Whether to show Snapshots' commands in main Sublimerge's menu
    "snapshots_in_menu": true,

    "snapshots_date_format": "%d/%m/%Y %H:%M:%S",


    //VERSION CONTROL SYSTEMS SUPPORT /////////////////////////////////////////////////////////////////

    //Sometimes the underlying VCS requires some environment variables to be set. This is the place
    //where you can define them.
    "environment": {
        //"NAME": "value"
    },

    //Whether enable Git, Mercurial and SVN support. Affects availability of VCS-related commands.
    "vcs_support": true,

    //Whether VCS cache should be enabled.
    //A VCS cache is a mechanism that caches discovered paths to repositories roots in order to boost
    //overall performance when VCS support is enabled. It also caches paths where no repository is found
    //so that Sublimerge will not traverse your directories when need an information if given file
    //is versioned or not.
    "vcs_cache_enabled": true,

    //Defines whether VCS cache should be validated upon Sublime Text startup.
    //You may want to disable this when you get performance problems while Sublime Text is starting up.
    //Notice: all paths will be cached permanently. When you start receiving errors related to missing
    //repositories (and/or VCS commands are not present when they should), you may need to use one
    //of the following Command Palette commands in order to make the cache consistent:
    //Sublimerge: Purge VCS Cache, Sublimerge: Validate VCS Cache
    "vcs_cache_validate_on_startup": true,

    //Defines the order in which version control systems should be discovered for VCS-related commands.
    //This is helpful when your project is versioned under multiple VCS setup. Set your primary on the
    //first position so that it will be always used no matter if another one is found.
    "vcs_discovery_order": ["git", "hg", "svn"],

    //Whether to perform cleanup of temporary files created by VCS during merge
    "vcs_after_merge_cleanup": true,


    //GIT SUPPORT (applicable when vcs_support = true)

    //Path to git executable
    //For Windows this could be something like:
    //C:\\PROGRA~1\\Git\\bin\\git.exe or C:\\PROGRA~2\\Git\\bin\\git.exe
    "git_executable_path": "git",

    //Global arguments added for all other `git` commands
    "git_global_args": "-c color.ui=false",


    //Additional arguments for 'git log' command
    "git_log_args": "--encoding=UTF-8 --no-color --no-decorate --follow",

    //Log format that will be passed: --format=pretty:<git_log_format>
    "git_log_format": "%H\t%h\t%an <%ae>\t%ai\t%s",

    //Format to parse date from Git log. Required for `date` and `date_user` calculation.
    "git_log_date_parse_format": "%Y-%m-%d %H:%M:%S %z",

    //Regular expression to parse the log output. The following groups are mandatory: `commit`, `date_raw`
    "git_log_regexp": "^(?P<commit>.+)\t(?P<abbrev_commit>.+)\t(?P<author>.+)\t(?P<date_raw>.+)\t(?P<subject>.*)$",

    //Defines a template for commits' log. Variables are defined as matching groups' names.
    //Each array item is a separate line. Other available variables:
    // date - relative date format with detailed date as defined in `date_format` setting
    // date_user - detailed date as defined in `date_format`
    "git_log_template": ["${abbrev_commit} | ${subject}", "by ${author}", "${date}"],




    //Additional arguments for 'git show' command
    "git_show_args": "",

    //SVN SUPPORT (applicable when vcs_support = true)

    //Path to svn executable
    "svn_executable_path": "svn",

    //Additional arguments for 'svn log' command
    "svn_log_args": "--stop-on-copy",

    //Format to parse date from SVN log. Required for `date` and `date_user` calculation.
    "svn_log_date_parse_format": "%Y-%m-%dT%H:%M:%S.%fZ",

    //Defines a template for commits' log. Available variables:
    // commit
    // subject
    // author
    // date - relative date format with detailed date as defined in `date_format` setting
    // date_user - detailed date as defined in `date_format`
    // date_raw - date as returned by SVN
    //
    //Each array item is a separate line.
    "svn_log_template": ["${commit} | ${subject}", "by ${author}", "${date}"],

    //Additional arguments for 'svn cat' command
    "svn_cat_args": "",

    //Global arguments added for all other `svn` commands
    "svn_global_args": "",


    //MERCURIAL SUPPORT (applicable when vcs_support = true)

    // Path to hg executable
    "hg_executable_path": "/usr/local/bin/hg",

    // Additional arguments for 'hg log' command
    "hg_log_args": "--encoding=UTF-8",

    //Log format that will be passed: --template <hg_log_format>
    "hg_log_format": "{node}\t{author}\t{date|isodate}\t{desc}",

    //Format to parse date from Mercurial log. Required for `date` and `date_user` calculation.
    "hg_log_date_parse_format": "%Y-%m-%d %H:%M %z",

    //Regular expression to parse the log output. The following groups are mandatory: `commit`, `date_raw`
    "hg_log_regexp": "^(?P<commit>.+)\t(?P<author>.+)\t(?P<date_raw>.+)\t(?P<subject>.*)$",

    //Defines a template for commits' log. Variables are defined as matching groups' names.
    //Each array item is a separate line. Other available variables:
    // date - relative date format with detailed date as defined in `date_format` setting
    // date_user - detailed date as defined in `date_format`
    "hg_log_template": ["${abbrev_commit} | ${subject}", "by ${author}", "${date}"],

    // Additional arguments for 'hg cat' command
    "hg_cat_args": "",

    // Global arguments added for all other `hg` commands
    "hg_global_args": "",


    //////////DIRECTORIES COMPARISON SETTINGS

    //List of directories' names which should be ignored while doing comparison.
    //They will be also ignored while copying. Names are case-sensitive.
    "dir_compare_ignore_dirs": ["RCS", "CVS", "tags", ".git", ".svn", ".hg"],

    //List of files' names which should be ignored while doing comparison.
    //They will be also ignored while copying. You can specify wildcards here, i.e. *.tmp
    //Names are case-sensitive.
    "dir_compare_ignore_files": [".DS_Store", "Thumbs.db"],

    //Normally Sublimerge will copy all changed or added files from source to target directory.
    //When this setting is true, it will also delete all files that exists in target, but not in source.
    //Use with caution.
    "dir_merge_remove_unmatched": false,

    //When set to true, you will be able to navigate through all items in directory.
    //When set to false, you will navigate only through changed items.
    // "dir_compare_navigate_all": true, //NOT IMPLEMENTED YET

    //Set to true if you want text diff to be opened always in a new window.
    "dir_compare_open_text_diff_in_new_window": false,


    //SYNTAX SPECIFIC SETTINGS ////////////////////////////////////////////////////////////////////////
    "syntax_specific": {
        "Python": {
            "ignore_whitespace": false,
            "ignore_crlf": false,
            "view": {
                "draw_white_space": ["begin", "middle", "end"]
            }
        }
    }
}
